import csv

results = {0.1: {0: {0.5: 0.03489918060750005, 0.55: 0.0310027732331691, 0.6: 0.028605381429617133, 0.65: 0.02679841040856551, 0.7: 0.02557561171470949, 0.75: 0.02565148375788693, 0.8: 0.02906236537127767, 0.9: 0.034958786293507724, 0.95: 0.037464072161613314, 1.0: 0.039714381392878785}, 10: {0.5: 0.03169992139590798, 0.55: 0.027234670552491746, 0.6: 0.02430656100146606, 0.65: 0.022169488723611623, 0.7: 0.02153565331882462, 0.75: 0.02550872096321396, 0.8: 0.02913573623478567, 0.9: 0.03517666206987291, 0.95: 0.03772041219627776, 1.0: 0.040011965902252845}, 20: {0.5: 0.02429997979507971, 0.55: 0.01885247347286729, 0.6: 0.015261697093474932, 0.65: 0.017418691243916748, 0.7: 0.022330194372901117, 0.75: 0.026600772410625233, 0.8: 0.030347863302759126, 0.9: 0.03662282837328693, 0.95: 0.039427599521912896, 1.0: 0.042050493271911835}, 30: {0.5: 0.01646285081393743, 0.55: 0.010350606309282298, 0.6: 0.012708841802087353, 0.65: 0.018564483223294424, 0.7: 0.023857802150802736, 0.75: 0.029470950646031734, 0.8: 0.034450796575451956, 0.9: 0.0429196350723285, 0.95: 0.04655919391070691, 1.0: 0.0498776259213137}, 40: {0.5: 0.01005634371616071, 0.55: 0.0066852127715190555, 0.6: 0.014121758585618423, 0.65: 0.02174253107087399, 0.7: 0.02834912276024325, 0.75: 0.034140553825052725, 0.8: 0.03926569472016065, 0.9: 0.04794726710993273, 0.95: ' ', 1.0: ' '}}, 0.2: {0: {0.5: 0.03564387789766509, 0.55: 0.03166470615962948, 0.6: 0.029227768952651573, 0.65: 0.027330898717530173, 0.7: 0.025958523465080187, 0.75: 0.025061654039127773, 0.8: 0.02808385013346677, 0.9: 0.03376975941035802, 0.95: 0.036201754104407124, 1.0: 0.03842269648281628}, 10: {0.5: 0.03245086030066867, 0.55: 0.02788240826470965, 0.6: 0.024938989811002805, 0.65: 0.022580895680489793, 0.7: 0.020891977673914045, 0.75: 0.02453287304493147, 0.8: 0.02802660960185402, 0.9: 0.033995754493882306, 0.95: 0.03650963611851326, 1.0: 0.03877356984160771}, 20: {0.5: 0.025062605326792924, 0.55: 0.01947027007349069, 0.6: 0.015690759497058733, 0.65: 0.016532786870063047, 0.7: 0.021391437915719704, 0.75: 0.02561320251009101, 0.8: 0.029317902742903114, 0.9: 0.035525683897255564, 0.95: 0.03820313941876794, 1.0: 0.04062511916426552}, 30: {0.5: 0.017196704192457342, 0.55: 0.010920400041178148, 0.6: 0.011974406426119346, 0.65: 0.01776619035860431, 0.7: 0.022795089729608423, 0.75: 0.02791225842387936, 0.8: 0.032842561457709224, 0.9: 0.041232734851380945, 0.95: 0.04484097711716202, 1.0: 0.04813233203689253}, 40: {0.5: 0.010719285395020628, 0.55: 0.006179551210218242, 0.6: 0.01320412830867963, 0.65: 0.020517130121336193, 0.7: 0.027061087881225715, 0.75: 0.03280011002386808, 0.8: 0.03788109492658546, 0.9: 0.04649338483194435, 0.95: ' ', 1.0: ' '}}, 0.3: {0: {0.5: 0.03608794313983992, 0.55: 0.03205279887010937, 0.6: 0.029576540283622547, 0.65: 0.027668825467872166, 0.7: 0.02615102673629342, 0.75: 0.025230476300023168, 0.8: 0.02692713349150282, 0.9: 0.032596355625884095, 0.95: 0.034977341120017116, 1.0: 0.03711734661499516}, 10: {0.5: 0.032897150468155646, 0.55: 0.028264678802225506, 0.6: 0.025292322394743418, 0.65: 0.02286950195376943, 0.7: 0.021068189172162695, 0.75: 0.0234913369569223, 0.8: 0.026911656685750372, 0.9: 0.032712501582394984, 0.95: 0.035191298859666834, 1.0: 0.037423568276556976}, 20: {0.5: 0.02551984616798736, 0.55: 0.019821373765237647, 0.6: 0.01599631052574329, 0.65: 0.01566615813650001, 0.7: 0.020383957736732277, 0.75: 0.024547112018123506, 0.8: 0.028205105824632322, 0.9: 0.03434990481412138, 0.95: 0.03702558344473687, 1.0: 0.0394476314235423}, 30: {0.5: 0.018108089908835962, 0.55: 0.01126504159470385, 0.6: 0.011293839932975312, 0.65: 0.017037553901566353, 0.7: 0.02198341898594485, 0.75: 0.02658082658126095, 0.8: 0.03114716272712334, 0.9: 0.039454384210808435, 0.95: 0.04302963287775695, 1.0: 0.04629248112485563}, 40: {0.5: 0.011999368542959668, 0.55: 0.005705220251590041, 0.6: 0.012567367077128994, 0.65: 0.01922644126073406, 0.7: 0.025704405767614652, 0.75: 0.031388241281754894, 0.8: 0.036422770593029265, 0.9: 0.04496226977924693, 0.95: 0.048621777212699675, 1.0: ' '}}}

for lambd in results:

    print('-'*20)
    print('-'*20)
    print('lambd=', lambd)

    for spr_angle in results[lambd]:
        print('-'*20)
        print('spr_angle=', spr_angle)

        for R_over_L in results[lambd][spr_angle]:
            print(R_over_L, results[lambd][spr_angle][R_over_L])

# for lambd in results:
#     print('-'*20)
#     print('-'*20)
#     print('lambd=', lambd)

#     folder = '/Users/mricardo/compas_dev/me/shape_comparison/pointed_crossvault/parametric_fd/'
#     file = folder + 'lambda_{}_results_minthk.csv'.format(lambd)

#     with open(file, 'w', encoding='UTF8') as f:

#         writer = csv.writer(f)

#         spr_angles = [[spr_angle, ' '] for spr_angle in results[lambd]]
#         titles = [['R/L', 't/s'] for spr_angle in results[lambd]]

#         spr_angles = [element for sublist in spr_angles for element in sublist]
#         titles = [element for sublist in titles for element in sublist]

#         writer.writerow(spr_angles)
#         writer.writerow(titles)

#         rows = {}

#         i = 0
#         for spr_angle in results[lambd]:

#             rows[i] = []

#             print('-'*20)
#             print('spr_angle=', spr_angle)

#             R_over_Ls = [R_over_L for R_over_L in results[lambd][spr_angle]]
#             t_over_ss = [results[lambd][spr_angle][R_over_L] for R_over_L in results[lambd][spr_angle]]

#             print(R_over_Ls, t_over_ss)

#             zips = list(zip(R_over_Ls, t_over_ss))

#             for k in zips:
#                 rows[i].append(k[0])
#                 rows[i].append(k[1])

#             i += 1

#             print(rows)

#         for i in range(len(rows[0])):
#             p = [rows[k][i] for k in rows]
#             writer.writerow(p)
